1. What happens when you initialize a repository? Why do you need to
do it?

   A .git directory (and perhaps some subdirectories) are
   created. Then some files to store metadata related to commits,
   branches, and so on are created, although they are likely to  be
   empty. 


2. How is the staging area different from the working directory and
the repository? What value do you think it offers?

   It lets you add files one by one to be tracked, but still commit
   them as a group. It also lets you change your mind before
   committing. 

3. How can you use the staging area to make sure you have one commit
per logical change? 

   Use the command "git diff --staged" before commiting, to review the
   changes that are about to be committed. Check that only one logical
   change is reported in the output to the "git diff --staged"
   command. 

4. What are some situations when branches would be helpful in keeping
your history organized? 

   You might want to work on two versions at once, with different
   features, levels, languages. One could be experimenting with
   something new, while continuing to develop the main branch.

5. How do the diagrams help you visualize the branch structure? 

   They help explain how certain commits can be reachable or
   unreachable. They are also important to visualize the relations
   between the various active branches. 

6. What is the result of merging two branches together? Why do we
represent it in the diagram the way we do? 

   Merging creates a new version (new commit) that includes the
   changes on both branches. In the diagram, the two branches are
   joined into a new node. That new node has ends of both branches as
   parents. 

